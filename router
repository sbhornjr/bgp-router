#!/usr/bin/env python

import argparse, socket, time, json, select, struct, math
import re, sys
from itertools import combinations

# DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

LGTH = "length"


##########################################################################################

class Router:
    routes = None     # array of dictionaries that are forwarding table entries
    updates = None    # array of update messages received
    revokes = None    # array of revoke messages received
    relations = None  # dictionary of network - relation
    sockets = None    # dictionary of network - socket

    def __init__(self, networks):
        self.routes = []
        self.updates = []
        self.revokes = []
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG:
                print "Starting socket for", network, relation
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def getbinary(self, numbers):
        totalbinary = ""
        for num in numbers:
            binary = bin(int(num))
            binary = binary[2:]
            while len(binary) < 8:
                binary = '0' + binary
            totalbinary += binary
        return totalbinary

    #convert function from: http://python.6.x6.nabble.com/Tutor-Convert-an-IP-address-from-binary-to-decimal-td1706883.html
    def convert(self, bin_ip):
        patt = re.compile(r'\d{8}')
        bin_list = patt.findall(str(bin_ip))

        dec_list = []
        for bin in bin_list:
            sum = 0
            i = 7
            for n in bin:
                if int(n):
                    sum = sum + 2 ** i
                i = i - 1
            dec_list.append(str(sum))

        dec_ip = '.'.join(dec_list)
        return dec_ip

    def masknetwork(self, network, netmask):
        netmsknum = 0
        netmskbinary = self.getbinary(netmask.split('.'))
        for char in netmskbinary:
            if char == '1':
                netmsknum += 1
            else:
                break

        i = 0
        netwkbinarylist = list(self.getbinary(network.split('.')))
        for item in netwkbinarylist:
            i += 1
            if i > netmsknum:
                netwkbinarylist[i - 1] = '*'

        return "".join(netwkbinarylist)

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        outroutes = []
        destbinary = self.getbinary(daddr.split("."))

        for entry in self.routes:
            outroute = entry
            entrybinary = self.masknetwork(outroute[NTWK], outroute[NMSK])
            i = 0
            for char in destbinary:
                if char != entrybinary[i]:
                    if entrybinary[i] == "*":
                        outroute[LGTH] = i
                        outroutes.append(entry)
                    break
                i += 1

        longestprefixmatching = 0
        for outroute in outroutes:
            if outroute[LGTH] > longestprefixmatching:
                longestprefixmatching = outroute[LGTH]

        for outroute in outroutes:
            if outroute[LGTH] != longestprefixmatching:
                outroutes.remove(outroute)

        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = routes
        if len(outroutes) > 1:
            path1 = outroutes[0][APTH]
            path2 = outroutes[1][APTH]
            if len(path1) < len(path2):
                del outroutes[1]
            elif len(path2) < len(path1):
                del outroutes[0]

        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the highest localpref """
        outroutes = routes
        if len(outroutes) > 1:
            pref1 = outroutes[0][LPRF]
            pref2 = outroutes[1][LPRF]
            if pref1 > pref2:
                del outroutes[1]
            elif pref2 > pref1:
                del outroutes[0]

        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = routes
        if len(outroutes) > 1:
            sorg1 = outroutes[0][SORG]
            sorg2 = outroutes[1][SORG]
            if sorg1 == 'True' and sorg2 == 'False':
                del outroutes[1]
            elif sorg2 == 'True' and sorg1 == 'False':
                del outroutes[0]

        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        outroutes = routes
        if len(outroutes) > 1:
            orig1 = outroutes[0][ORIG]
            orig2 = outroutes[1][ORIG]

            if orig1 == "IGP" and orig2 != "IGP":
                del outroutes[1]
            elif orig2 == "IGP" and orig1 != "IGP":
                del outroutes[0]
            elif orig1 == "EGP" and orig2 == "UNK":
                del outroutes[1]
            elif orig2 == "EGP" and orig1 == "UNK":
                del outroutes[0]

        return outroutes

    def get_lowest_ip(self, routes):
        """ select lowest ip """
        outroutes = routes
        if len(outroutes) > 1:
            ip1 = outroutes[0][PEER]
            ip2 = outroutes[1][PEER]
            if ip1 < ip2:
                del outroutes[1]
            elif ip2 < ip1:
                del outroutes[0]

        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if len(routes) > 1:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            routes = self.get_lowest_ip(routes)
            peer = routes[0][PEER]
        elif len(routes) == 1:
            peer = routes[0][PEER]

        if peer:
            return self.sockets[peer], peer
        else:
            return None, None

    def forwardupdatesrevokes(self, srcif, packet):
        """	Forward a data packet of type update or revoke	"""
        if packet[TYPE] != UPDT and packet[TYPE] != RVKE:
            return False
        fromrelation = self.relations[srcif]

        for sock in self.sockets:
            if sock != srcif:
                destip = sock
                packet[DEST] = destip
                srciplist = destip.split(".")

                i = 0
                for ipbit in srciplist:
                    if i == 3:
                        srciplist[i] = "1"
                    else:
                        srciplist[i] += "."
                        i += 1
                srcip = "".join(srciplist)
                packet[SRCE] = srcip
                if fromrelation == "cust":
                    self.sockets[sock].sendall(json.dumps(packet))
                elif self.relations[sock] == "cust":
                    self.sockets[sock].sendall(json.dumps(packet))

    def forwarddata(self, srcif, packet):
        if packet[TYPE] != DATA:
            return False

        sock, peer = self.get_route(srcif, packet[DEST])

        if sock:
            fromrelation = self.relations[srcif]
            torelation = self.relations[peer]

            if fromrelation == 'cust' or torelation == 'cust':
                sock.sendall(json.dumps(packet))
            else:
                self.send_error(srcif, packet)
        else:
                self.send_error(srcif, packet)

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)

        def get_mask_length(route):
            return self.getbinary(route["netmask"].split(".")).count("1")

        def get_last_unmasked_bit(route):
            # return route['netmask'][route['netmask'].find("*") - 1]
            return self.getbinary(route["network"].split("."))[get_mask_length(route)-1]#self.getbinary(route['netmask'].split(".")).find("0")]

        def aggregatable(e1, e2):
            "only run on entries with same net mask length"

            #print("\n\n\ncomparing: ")
            #print(e1)
            #print(e2)

            # must have same mask
            if get_mask_length(e1) != get_mask_length(e2):
                #print("mask length mismatch: " + str(get_mask_length(e1)) + " " + str(get_mask_length(e2)))
                return False

            # must go through same port
            if e1["peer"] != e2["peer"]:
                #print("peer mismatch: " + e1['peer'] + "   " + e2['peer'])
                return False

            # all unmasked bits except last must match
            if get_last_unmasked_bit(e1) == get_last_unmasked_bit(e2):
                # last unmasked bit should differ
                #print("final bit match:  e1: " + str(get_last_unmasked_bit(e1)) + "    e2:  " + str(get_last_unmasked_bit(e2)))
                return False


            for i in range(0, get_mask_length(e1)): #TODO: off by one???
                #print( self.getbinary(e1["network"].split("."))[i] + "   " + self.getbinary(e2["network"].split("."))[i])

                if self.getbinary(e1["network"].split("."))[i] != self.getbinary(e2["network"].split("."))[i]:
                    # mismatched bit at i
                    #print("unmatched at: " + str(i))
                    if i == get_mask_length(e1) - 1:
                        # unmatched bit is the last unmasked bit, so we can aggregatte
                        netmask = self.getbinary(e1["netmask"].split("."))
                        network = self.getbinary(e1["network"].split("."))

                        #print(self.convert( netmask[:netmask.find("0") - 1] + '0' + netmask[netmask.find("0"):]))
                        #print("prenetmask:   " + self.convert(netmask))

                        # remove 1 bit from netmask in the aggregated entry
                        e1["netmask"] = self.convert( netmask[:netmask.find("0") - 1] + '0' + netmask[netmask.find("0"):])
                        #print("postnetmask:   " + e1['netmask'])
                        #print("prenetwork:    " + self.convert(network))

                        # adjust the network number for the aggregated entry
                        e1["network"] = self.convert( network[:get_mask_length(e1) ] + '0' + network[get_mask_length(e1)+1:]) #TODO: this passes the test, not sure if its right in genral though
                        #print("postnetwork:    " + e1["network"])

                        self.routes.remove(e2)
                        return True
                    else:
                        # mismatch not at last bit
                        return False

        def agg():
            for pair in combinations(self.routes, 2):
                if aggregatable(pair[0], pair[1]):
                    return True
            return False

        # for pair in combinations(self.routes, 2):
        #     # print aggregatable(pair[0], pair[1])
        #     if(aggregatable(pair[0], pair[1])):

        while agg():
            i = 0
            #print "aggregated"

        return False

    def disaggregate(self):
        """ tear down the routes table and build it again """

        self.routes = []

        for updat in self.updates:
            self.update(updat[SRCE], updat, False)

        print "ROUTING TABLE DISAGG:", self.routes
        print self.revokes

        for revok in self.revokes:
            self.revoke(revok[SRCE], revok, False)

        self.coalesce()

    def update(self, srcif, packet, dis):
        """	handle update packets	"""
        network = packet[MESG][NTWK]
        netmask = packet[MESG][NMSK]
        origin = packet[MESG][ORIG]
        localpref = packet[MESG][LPRF]
        aspath = packet[MESG][APTH]
        selforigin = packet[MESG][SORG]

        entry = {NTWK: network, NMSK: netmask, PEER: srcif, ORIG: origin,
                 LPRF: localpref, APTH: aspath, SORG: selforigin}

        self.routes.append(entry)

        if dis:
            self.updates.append(packet)
            self.forwardupdatesrevokes(srcif, packet)
            self.coalesce()

    def revoke(self, srcif, packet, dis):
        """	handle revoke packets	"""
        if dis:
            self.revokes.append(packet)

        revokednetwork = packet[MESG][0][NTWK]
        deadnetmask = packet[MESG][0][NMSK]
        deadpeer = packet[SRCE]
        deadroute = None

        print "UPDATES", self.updates

        for route in self.routes:
            if route[NTWK] == revokednetwork and route[NMSK] == deadnetmask and route[PEER] == deadpeer:
                deadroute = route
                self.routes.remove(route)
        if deadroute is None:
            hadroute = False
            for route in self.updates:
                if route[MESG][NTWK] == revokednetwork and route[MESG][NMSK] == deadnetmask and route[DEST] == deadpeer:
                    hadroute = True
            if hadroute:
            self.disaggregate()

        if dis:
            self.forwardupdatesrevokes(srcif, packet)
        return True

    def dump(self, packet):
        """	handles dump table requests	"""
        packet_source = packet[SRCE]
        packet[SRCE] = packet[DEST]
        packet[DEST] = packet_source

        packet[MESG] = self.routes
        packet[TYPE] = "table"

        sock = self.sockets[packet[DEST]]

        sock.sendall(json.dumps(packet))
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        type = packet[TYPE]
        if type == UPDT:
            self.update(srcif, packet, True)
        elif type == DATA:
            self.forwarddata(srcif, packet)
        elif type == DUMP:
            self.dump(packet)
        elif type == RVKE:
            self.revoke(srcif, packet, True)
        else:
            return False
        return True

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        msg[MESG] = {}
        for sock in self.sockets:
            if sock == conn:
                msg[DEST] = msg[SRCE]
                sockparts = sock.split('.')
                sockparts.pop()
                sockparts.insert(3, '1')
                msg[SRCE] = '.'.join(x.strip() for x in sockparts)
                msg[TYPE] = "no route"
                self.sockets[sock].sendall(json.dumps(msg))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    print msg
                    print "ROUTING TABLE", self.routes
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return


if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
