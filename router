#!/usr/bin/env python

import argparse, socket, time, json, select, struct, math

# DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

BNRY = "binary"
LGTH = "length"
NMSKNUM = "netmask number"


##########################################################################################

class Router:
    routes = None     # array of dictionaries that are forwarding table entries
    updates = None    # array of update messages received
    relations = None  # dictionary of network - relation
    sockets = None    # dictionary of network - socket

    def __init__(self, networks):
        self.routes = []
        self.updates = []
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG:
                print "Starting socket for", network, relation
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def getbinary(self, numbers):
        totalbinary = ""
        for num in numbers:
            binary = bin(int(num))
            while len(binary) < 10:
                binary += '0'
            totalbinary += binary[2:]

        return totalbinary

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        destbinary = self.getbinary(daddr.split("."))

        for entry in self.routes:
            outroute = entry
            entrybinary = outroute[BNRY]
            i = 0
            for char in destbinary:
                if char != entrybinary[i]:
                    if entrybinary[i] == "*":
                        outroute[LGTH] = i
                        outroutes.append(entry)
                    break
                i += 1

        longestprefixmatching = 0
        for outroute in outroutes:
            if outroute[LGTH] > longestprefixmatching:
                longestprefixmatching = outroute[LGTH]

        for outroute in outroutes:
            if outroute[LGTH] != longestprefixmatching:
                outroutes.remove(outroute)

        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        outroutes = []
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        outroutes = []
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if len(routes) > 1:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
            peer = routes[0][DEST]
        elif len(routes) == 1:
            peer = routes[0][DEST]

        return self.sockets[peer] if peer else None

    def forwardupdatesrevokes(self, srcif, packet):
        """	Forward a data packet of type update or revoke	"""
        if (packet[TYPE] != UPDT and packet[TYPE] != RVKE):
            return False

        for sock in self.sockets:
            if sock != srcif:
                destip = sock
                packet[DEST] = destip
                srciplist = destip.split(".")
                i = 0
                for ipbit in srciplist:
                    if i == 3:
                        srciplist[i] = "1"
                    else:
                        srciplist[i] += "."
                        i += 1
                srcip = "".join(srciplist)
                packet[SRCE] = srcip
                self.sockets[sock].sendall(json.dumps(packet))

    def forwarddata(self, srcif, packet):
        if (packet[TYPE] != DATA):
            return False

        sock = self.get_route(srcif, packet[DEST])

        if sock:
            sock.sendall(json.dumps(packet))

        self.send_error(srcif, packet)

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        network = packet[MESG][NTWK]
        netmask = packet[MESG][NMSK]
        entry = {NTWK: network, NMSK: netmask, PEER: srcif, NMSKNUM: 0 }

        netmskbinary = self.getbinary(netmask.split('.'))
        for char in netmskbinary:
            if char == '1':
                entry[NMSKNUM] += 1
            else:
                break

        netwkbinary = self.getbinary(network.split('.'))
        i = 0
        netwkbinarylist = list(netwkbinary)
        for item in netwkbinarylist:
            i += 1
            if i > entry[NMSKNUM]:
                netwkbinarylist[i - 1] = '*'
        entry[BNRY] = "".join(netwkbinarylist)

        self.routes.append(entry)

        self.forwardupdatesrevokes(srcif, packet)

    def revoke(self, packet):
        """	handle revoke packets	"""
        # TODO
        return True

    def dump(self, packet):
        """	handles dump table requests	"""
        packet_source = packet[SRCE]
        packet[SRCE] =packet[DEST]
        packet[DEST] = packet_source

        dump_routes = self.routes
        for route in dump_routes:
            del route[NMSKNUM]
            del route[BNRY]

        packet[MESG] = dump_routes
        packet[TYPE] = "table"

        sock = self.sockets[packet[DEST]]

        sock.sendall(json.dumps(packet))
        return True

    def handle_packet(self, srcif, packet):
        """	dispatches a packet """
        # TODO
        type = packet[TYPE]
        if (type == UPDT):
            self.update(srcif, packet)
        elif (type == DATA):
            self.forwarddata(srcif, packet)
        elif (type == DUMP):
            self.dump(packet)
        else:
            return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return False

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return
        return


if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
